#!/usr/local/bin/python3.6
def printCompetitor(competitor):
    '''
    Given the data of a competitor, the function prints it in a specific format.
H    Arguments:
        competitor: {'competition name': competition_name, 'competition type': competition_type,
                        'competitor id': competitor_id, 'competitor country': competitor_country,
                        'result': result}
    '''
    competition_name = competitor['competition name']
    competition_type = competitor['competition type']
    competitor_id = competitor['competitor id']
    competitor_country = competitor['competitor country']
    result = competitor['result']

    assert (isinstance(result, int))  # Updated. Safety check for the type of result

    print(
        f'Competitor {competitor_id} from {competitor_country} participated in {competition_name} ({competition_type}) and scored {result}')


def printCompetitionResults(competition_name, winning_gold_country, winning_silver_country, winning_bronze_country):
    '''
    Given a competition name and its champs countries, the function prints the winning countries
        in that competition in a specific format.
    Arguments:
        competition_name: the competition name
        winning_gold_country, winning_silver_country, winning_bronze_country: the champs countries
    '''
    undef_country = 'undef_country'
    countries = [country for country in [winning_gold_country, winning_silver_country, winning_bronze_country] if
                 country != undef_country]
    print(f'The winning competitors in {competition_name} are from: {countries}')


def key_sort_competitor(competitor):
    '''
    A helper function that creates a special key for sorting competitors.
    Arguments:
        competitor: a dictionary contains the data of a competitor in the following format:
                    {'competition name': competition_name, 'competition type': competition_type,
                        'competitor id': competitor_id, 'competitor country': competitor_country,
                        'result': result}
    '''
    competition_name = competitor['competition name']
    result = competitor['result']
    return (competition_name, result)


def makeDictionary(competitor, competition):
    dictionary = {"competition name": competition[1],
                  "competition type": competition[3],
                  "competitor id": competitor[1],
                  "competitor country": competitor[2],
                  "result": int(competition[4])}
    return dictionary


def readParseData(file_name):
    '''
    Given a file name, the function returns a list of competitors.
    Arguments:
        file_name: the input file name. Assume that the input file is in the directory of this script.
    Return value:
        A list of competitors, such that every record is a dictionary, in the following format:
            {'competition name': competition_name, 'competition type': competition_type,
                'competitor id': competitor_id, 'competitor country': competitor_country,
                'result': result}
    '''
    competitors = []
    competitions = []
    competitors_in_competitions = []
    # TODO Part A, Task 3.4
    f = open(file_name, 'r')
    for line in f.readlines():
        if line.startswith('competitor'):
            competitors_list = line.split()
            competitors.append(competitors_list)
        else:
            competitions_list = line.split()
            competitions.append(competitions_list)
    for competitor in competitors:
        for competition in competitions:
            if competitor[1] == competition[2]:
                dictionary = makeDictionary(competitor, competition)
                competitors_in_competitions.append(dictionary)
    f.close()
    return competitors_in_competitions


def idcount(competition, id):
    i = 0
    counter=0
    for datas in competition:
        if i > 0:
            if datas==id:
                counter=counter+1
        i += 1
    return counter


def deletecompetitor(competition_list,competition_name, id):
    i = 0
    for competition in competition_list:
        if competition_name == competition[0]:

            for datas in competition:
                if i > 1:
                    if datas[2] == id:
                        competition.remove(datas)
                i += 1
            return None


def isCompetitionExist(competition_name, competition_list):
    for competition in competition_list:
        if competition[0] == competition_name:
            return True
    return False


# take second element for sort
def takeSecond(elem):
    return elem[1]


def calcCompetitionsResults(competitors_in_competitions):
    '''
    Given the data of the competitors, the function returns the champs countries for each competition.
    Arguments:
        competitors_in_competitions: A list that contains the data of the competitors
                                    (see readParseData return value for more info)
    Retuen value:
        A list of competitions and their champs (list of lists).
        Every record in the list contains the competition name and the champs, in the following format:
        [competition_name, winning_gold_country, winning_silver_country, winning_bronze_country]
    '''
    competitions_champs = []
    # TODO Part A, Task 3.5
    competition_list = []
    for dictionary in competitors_in_competitions:
        if isCompetitionExist(dictionary['competition name'], competition_list):
            for competition in competition_list:
                competition_name = dictionary['competition name']
                if competition[0] == competition_name:
                    id = dictionary['competitor id']
                    competition_data = [dictionary['competitor country'], dictionary['result'],
                                        dictionary['competitor id']]
                    competition.append(competition_data)

        else:
            competition_name = dictionary['competition name']
            ''' changing:'''
            competition_type = [dictionary['competition type']]
            competition_data = [dictionary['competitor country'], dictionary['result'], dictionary['competitor id']]
            '''I added competition type'''
            new_competition = [competition_name, competition_type, competition_data]
            competition_list.append(new_competition)

            # here we are sure that we do not have duplicates , so we start sorting
    id_lists = []
    for competition in competition_list :
        i=0
        id_list = []
        for competitor in competition:
            if i == 0:
                id_list.append(competitor)
            if i>1:
                id_list.append(competitor[2])
            i = i+1
        id_lists.append(id_list)
    for competition in id_lists:
        for id in competition:
            if (idcount(competition, id)) > 1:
                deletecompetitor(competition_list, competition[0], id)


    for competition in competition_list:
        competition_name = competition[0]
        '''adding competition type'''

        competition_type = competition[1]
        '''changed index'''
        new_competition = competition[2:]
        '''changed index'''
        # sorted(new_competition, key=takeSecond)\
        if competition_type == ['timed'] or competition_type == ['knockout']:
            new_competition.sort(key=takeSecond)
        if competition_type == ['untimed']:
            new_competition.sort(key=takeSecond, reverse=True)

        if len(new_competition) < 3 and len(new_competition) > 0:
            if len(new_competition) == 1:
                final_list = [competition_name, new_competition[0][0], 'undef_country', 'undef_country']
                competitions_champs.append(final_list)
            if len(new_competition) == 2:
                final_list = [competition_name, new_competition[0][0], new_competition[1][0], 'undef_country']
                competitions_champs.append(final_list)

        if len(new_competition) >= 3:
            final_list = [competition_name, new_competition[0][0], new_competition[1][0], new_competition[2][0]]
            competitions_champs.append(final_list)


    return competitions_champs


def partA(file_name='input.txt', allow_prints=True):
    # read and parse the input file
    competitors_in_competitions = readParseData(file_name)
    if allow_prints:
        # competitors_in_competitions are sorted by competition_name (string) and then by result (int)
        for competitor in sorted(competitors_in_competitions, key=key_sort_competitor):
            printCompetitor(competitor)

    # calculate competition results
    competitions_results = calcCompetitionsResults(competitors_in_competitions)
    if allow_prints:
        for competition_result_single in sorted(competitions_results):
            printCompetitionResults(*competition_result_single)

    return competitions_results


def partB(file_name='input.txt'):

    import Olympics
    competitions_results = partA(file_name, allow_prints=False)
    new_olympic = Olympics.OlympicsCreate()

    for result in competitions_results:
        Olympics.OlympicsUpdateCompetitionResults(new_olympic, result[1], result[2], result[3])

    Olympics.OlympicsWinningCountry(new_olympic)

    Olympics.OlympicsDestroy(new_olympic)


if __name__ == "__main__":
    '''
    The main part of the script.
    __main__ is the name of the scope in which top-level code executes.

    To run only a single part, comment the line below which correspondes to the part you don't want to run.
    '''
    file_name = 'input.txt'

    partA(file_name)
    partB(file_name)
